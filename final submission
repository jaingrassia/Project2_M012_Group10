import random


def exploit_only():
    avg = [10, 15, 12]
    sd = [8, 6, 5]
    c1 = random.normalvariate(avg[0], sd[0])
    c2 = random.normalvariate(avg[1], sd[1])
    c3 = random.normalvariate(avg[2], sd[2])
    sum = c1 + c2 + c3
    max_hap = max(c1,c2,c3)
    if c1 == max_hap:
        sum += 297*c1
    elif c2 == max_hap:
        sum += 297*c2
    elif c3 == max_hap:
        sum += 297*c3
    return sum




def explore_only():
    avg = [10, 15, 12]
    sd = [8, 6, 5]
    e = 0
    for i in range(100):
        e += random.normalvariate(avg[1], sd[1]) + random.normalvariate(avg[0], sd[0])

    return e


def HappiestCaf(caf1:list, caf2:list, caf3:list):  # This function genrates which caf has the highest happiness value
    avghap1 = sum(caf1) / len(caf1)  # Gives average of the list Example: p1 = [1, 5, 3] sum(p1) return 1+5+3= 9--- len(p1) return 3 because theres is 3 items in the list
    avghap2 = sum(caf2) / len(caf2)
    avghap3 = sum(caf3) / len(caf3)
    if avghap1 > avghap2 and avghap1 > avghap3: # These lines of code is used so eGreedy will return the happinessvalue of each caf
        return 1
    elif avghap1 < avghap2 and avghap2 > avghap3:
        return 2
    else:
        return 3

def happyvalgen(p1:int, list1:list, list2:list, list3:list): # This is for the "i" in eGreedy
    if p1 == 1:    # When "i = random.randint(1, 3)" is ran in eGeedy the function will turn to this one and run the corresponding line of code depending on the value that randint choose
        list1.append(random.normalvariate(10, 8))
    elif p1 == 2:
        list2.append(random.normalvariate(15, 6))
    else:
        list3.append(random.normalvariate(12, 5))

def eGreedy(e=10):  # Actual function
    c1 = [random.normalvariate(10, 8)] # This three lines of code account for the first vist *ONE PER DAY*  for the first 3 days
    c2 = [random.normalvariate(15, 6)]
    c3 = [random.normalvariate(12, 5)]
    for day in range(1, 297):     # This loop runs for the remaining 297 days
        r = random.random() # generates a number 0 through 1
        if r < float(e) / 100:  # if the number generated is less than 10% then choose a random caf
            i = random.randint(1, 3)
            happyvalgen(i, c1, c2, c3)
        else:
            i = HappiestCaf(c1, c2, c3) # if the number generated by "r" is bigger than 10% the function will choose whatever caf gave the high happiness value
            happyvalgen(i, c1, c2, c3)
    return sum(c1 + c2 + c3)

def simulation(t, e=10):
    a = [10, 15, 12]
    d = [8, 6, 5]
    optimum = 15
    explore = a[0]*100 + a[1]*100 + a[2]*100
    exploit = a[0] + a[1] + a[2] + (297*optimum)
    egreedy = (.9*300*optimum) + ((.1/3)*300*a[1]) + ((.1/3)*300*a[2])


    optimum = 4500
    expected = {"optimum": optimum, "explore": explore, "exploit": exploit, "eGreedy": egreedy}

    exploreSum = 0
    exploitSum = 0
    eGreedySum = 0

    for i in range(t):
        exploitSum = exploitSum + exploit_only()
        exploreSum = exploreSum + explore_only()
        eGreedySum = eGreedySum + eGreedy()



    exploitavg = exploitSum/t
    exploreavg = exploreSum/t
    eGreedyavg = eGreedySum/t

    avg_regret1 = optimum - exploitavg
    avg_regret2 = optimum - exploreavg
    avg_regret3 = optimum - eGreedyavg

    print("The simulation was run: " + str(t) + "times")
    print("The Optimum Happiness is: " + str(optimum))
    print("ExploitOnly() Average Happiness: " + str(exploitavg) + ", Average Regret: " + str(avg_regret1) + ", Expected Total Happiness: " + str(expected["explore"]), "Expectected Total Regret 8")
    print("ExploreOnly() Average Happiness: " + str(exploreavg) + ", Average Regret: " + str(avg_regret2) + ", Expected Total Happiness: " + str(expected["exploit"]) + ", Expectected Total Regret 800")
    print("eGreedy() Average Happiness: " + str(eGreedyavg) + ", Average Regret: " + str(avg_regret3) + ", Expected Total Happiness: " + str(expected["eGreedy"]) + ", Expectected Total Regret: " + str(4500 - expected["eGreedy"]))
